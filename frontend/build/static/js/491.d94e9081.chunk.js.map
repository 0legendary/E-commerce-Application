{"version":3,"file":"static/js/491.d94e9081.chunk.js","mappings":"oJAAA,MAAMA,EAAkBC,MAAOC,EAAWC,KACtC,MAAMC,EAAM,IAAIC,YACVC,EAAY,CAAEC,KAAM,OAAQC,KAAM,SAClCC,QAAYC,OAAOC,OAAOC,UAAU,MAAOR,EAAIS,OAAOX,GAAYI,GAAW,EAAO,CAAC,OAAQ,WAC7FQ,QAAmBJ,OAAOC,OAAOI,KAAKT,EAAUC,KAAME,EAAKL,EAAIS,OAAOV,IAG5E,OAFkBa,MAAMC,KAAK,IAAIC,WAAWJ,IAClBK,KAAKC,GAAMA,EAAEC,SAAS,IAAIC,SAAS,EAAG,OAAMC,KAAK,GAC7D,C","sources":["../node_modules/@uploadcare/rest-client/dist/esm/createSignature.browser.b4bcb7f3.mjs"],"sourcesContent":["const createSignature = async (secretKey, signString) => {\n    const enc = new TextEncoder();\n    const algorithm = { name: 'HMAC', hash: 'SHA-1' };\n    const key = await crypto.subtle.importKey('raw', enc.encode(secretKey), algorithm, false, ['sign', 'verify']);\n    const hashBuffer = await crypto.subtle.sign(algorithm.name, key, enc.encode(signString));\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    const hashHex = hashArray.map((b) => b.toString(16).padStart(2, '0')).join('');\n    return hashHex;\n};\n\nexport { createSignature };\n"],"names":["createSignature","async","secretKey","signString","enc","TextEncoder","algorithm","name","hash","key","crypto","subtle","importKey","encode","hashBuffer","sign","Array","from","Uint8Array","map","b","toString","padStart","join"],"sourceRoot":""}